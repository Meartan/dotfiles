/* Connecting to SHOUTcast
 * As SHOUTcast doesn't want to provide new API keys, we're acting as a regular
 * webbrowser, and only enhance the publicly available features.
 */

// The URL parts we'll use to connect to SHOUTcast's API
const shoutcastURL = "http://www.shoutcast.com/";
const shoutcastStationListURL = "ajax_dir"
const shoutcastStationListParams = "order=desc&criteria=listenerhead&ajax=true&count=";
const shoutcastGenreStationListURL = "genre-ajax/";
const shoutcastGenreStationListParams = "ajax=true&mode=listeners&order=desc&count=";
// This *could* change, it will be updated in _parseStationListFromText.
var shoutcastTuneURL = "http://yp.shoutcast.com/sbin/tunein-station.pls";

// The class doin' ALL stuff that is SHOUTcast-API related
var ShoutcastRadio = {
  // the maximal list length (effective list will be smaller because of the dropped Entries (no MP3, not enough Bitrate / Listener))
  maxEntries : 600,
  
  // Length of a page
  pageLen : 150,
  
  // Returns a URL to the pls with the Stream for the given SHOUTcast Stream ID
  getListenURL : function(id) {
    return (shoutcastTuneURL + "?id=" + id);
  },
  
  // Returns a URL to the html-part Ajax result for the given genre.
  getListURL : function(genre) {
    if (genre)
      return shoutcastURL + shoutcastGenreStationListURL + genre;
    else
      return shoutcastURL + shoutcastStationListURL;
  },
  
  // Get the POST parameters for the Request
  getParams : function (genre,page) {
    if (genre)
      return shoutcastGenreStationListParams + (this.pageLen) + "&strIndex=" + (this.pageLen * page);
    else
      return shoutcastStationListParams + (this.pageLen) + "&strIndex=" + (this.pageLen * page);
  },
  
  // Parses the data from a html-part generated by the Ajax SHOUTcast API
  _parseStationListFromText : function(text, genre) {
    var hadContent = false;
    var result = [];
    var splitted = text.split('<a class="playbutton clickabletitle');
    for (var entry = 1; entry < splitted.length; entry++){
      var ent = splitted[entry];
      hadContent = true;
      result.push(
      {
        id : ent.split('" id="')[1].split('"')[0],
        genre : genre ? genre : ent.split('<div class="dirgenre">')[1].split('</div>')[0],
        type : ent.split('<div class="dirtype">')[1].split('</div>')[0],
        bitrate : ent.split('<div class="dirbitrate">')[1].split('</div>')[0],
        numListeners : ent.split('<div class="dirlistners">')[1].split('</div>')[0],
        currentTrack : ent.split('" title="')[1].split('" ')[0],
        name : ent.split('" title="')[1].split('" href="')[0]
      });
      shoutcastTuneURL = ent.split('" href="')[1].split('?id=')[0]; // should be the same for all streams
    }
    if (hadContent)
      return result;
    else
      return null;
  },
  
  // Returns a Stream-Array for the given genre
  getStationList : function(genre) {
    var stationList = [];
    var i = 0;
    var done = false;
    while (!done){
      var req = new XMLHttpRequest();
      if (genre == "sbITop")
        genre = null;
      req.open("POST",
        this.getListURL(genre), false);
      var params = this.getParams(genre,i);
			i++;
      req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      req.setRequestHeader("Content-length", params.length);
      req.setRequestHeader("Connection", "keep-alive");
      req.genre = genre;
      try {
        req.send(params);
        var newEntries = this._parseStationListFromText(req.responseText, genre);
        if (newEntries){
          stationList = stationList.concat(newEntries);
          done = i*this.pageLen >= this.maxEntries;
        } else {
          done = true;
        }
      } catch (e) { } // Drop connection errors, we'll return an empty array
    }
    return stationList;
  }
}